#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        ecs {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q    &kp W             &kp E       &kp R             &kp T                                                  &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A    &kp S             &kp D       &kp F             &kp G        &kp LC(LG(NUMBER_4))    &kp MINUS         &kp H        &kp J  &kp K      &kp L    &kp SQT
&kp Z    &kp X             &kp C       &kp V             &kp B        &kp LEFT_SHIFT          &kp LEFT_COMMAND  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp TAB  &kp LEFT_CONTROL  &kp LC(UP)  &lt 6 LANGUAGE_1  &lt 2 SPACE  &lt 4 LANGUAGE_2        &kp BACKSPACE     &lt 1 ENTER                             &to 3
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F11  &kp F12  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                            &trans
            >;
        };

        NUM {
            bindings = <
&none           &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &none                  &none                                   &kp EQUAL   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SLASH
&kp LEFT_SHIFT  &none             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &kp ESCAPE    &kp TAB    &kp MINUS   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_0
&none           &none             &none                 &kp COMMA              &kp GRAVE      &none         &kp SPACE  &kp PERIOD  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH
&trans          &trans            &trans                &trans                 &trans         &trans        &trans     &trans                                                &none
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans    &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB4  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &mkp MB5  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                  &to 0
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE        &none             &none         &none   &none                                     &kp HOME        &none           &kp UP_ARROW    &none            &none
&kp LEFT_CONTROL  &kp LEFT_COMMAND  &kp LEFT_ALT  &none   &none   &kp K_VOLUME_UP      &none        &kp END         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none
&none             &none             &none         &none   &none   &kp K_VOLUME_DOWN    &kp K_MUTE2  &none           &none           &none           &none            &none
&none             &none             &none         &trans  &trans  &trans               &trans       &kp LEFT_SHIFT                                                   &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        BlueTooth {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans  &to 0         &to 7         &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans  &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                            &bt BT_CLR_ALL
            >;
        };

        win {
            bindings = <
&kp Q    &kp W         &kp E             &kp R             &kp T                                              &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A    &kp S         &kp D             &kp F             &kp G        &kp PRINTSCREEN     &kp MINUS         &kp H        &kp J  &kp K      &kp L    &kp SQT
&kp Z    &kp X         &kp C             &kp V             &kp B        &kp LEFT_SHIFT      &kp LEFT_CONTROL  &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH
&kp TAB  &kp LEFT_WIN  &kp LA(LEFT_WIN)  &lt 6 LANGUAGE_1  &lt 2 SPACE  &lt 4 LANGUAGE_2    &kp BSPC          &lt 1 ENTER                             &to 3
            >;
        };
    };
};
